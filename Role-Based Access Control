Add a Role Column to Users Table

Run in PostgreSQL:

ALTER TABLE users ADD COLUMN role VARCHAR(20) DEFAULT 'user';





Update registerUser to Accept Role (Optional)

In src/controllers/userController.js:

export async function registerUser(req, res) {
  const { name, email, password, role } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    const result = await pool.query(
      "INSERT INTO users (name, email, password, role) VALUES ($1, $2, $3, $4) RETURNING id, name, email, role",
      [name, email, hashedPassword, role || "user"]
    );

    res.status(201).json({
      message: "User registered successfully",
      user: result.rows[0],
    });
  } catch (error) {
    res.status(500).json({ message: "Error registering user", error });
  }
}







Modify JWT to Include Role

In loginUser, update token generation:

function generateAccessToken(user) {
  return jwt.sign(
    { id: user.id, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: "15m" }
  );
}

function generateRefreshToken(user) {
  return jwt.sign(
    { id: user.id, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: "7d" }
  );
}

export async function loginUser(req, res) {
  const { email, password } = req.body;

  try {
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    if (result.rows.length === 0) return res.status(401).json({ message: "Invalid credentials" });

    const user = result.rows[0];
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Invalid credentials" });

    const accessToken = generateAccessToken(user);
    const refreshToken = generateRefreshToken(user);

    await pool.query("UPDATE users SET refresh_token = $1 WHERE id = $2", [refreshToken, user.id]);

    res.json({ message: "Login successful", accessToken, refreshToken, role: user.role });
  } catch (error) {
    res.status(500).json({ message: "Error logging in", error });
  }
}








Create Role Middleware

Create src/middleware/roleMiddleware.js:

export function requireRole(role) {
  return (req, res, next) => {
    if (req.user.role !== role) {
      return res.status(403).json({ message: `Requires ${role} role` });
    }
    next();
  };
}








Protect Mentor-Only Actions

Example: add ability for mentors to accept or reject sessions.

Update src/controllers/sessionController.js:
export async function updateSessionStatus(req, res) {
  const { id } = req.params;
  const { status } = req.body; // "accepted" or "rejected"

  try {
    const result = await pool.query(
      "UPDATE sessions SET status = $1 WHERE id = $2 RETURNING *",
      [status, id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "Session not found" });
    }

    res.json({ message: "Session updated", session: result.rows[0] });
  } catch (error) {
    res.status(500).json({ message: "Error updating session", error });
  }
}







Update src/routes/sessionRoutes.js:
import { protect } from "../middleware/authMiddleware.js";
import { requireRole } from "../middleware/roleMiddleware.js";

router.patch("/:id/status", protect, requireRole("mentor"), updateSessionStatus);









Testing Role-Based Access Control

Register Two Users

One with "role": "mentor"

One with default "role": "user"

Login as User → Book a Session
POST /api/sessions → works ✅

Login as Mentor → Accept Session
PATCH /api/sessions/1/status

{ "status": "accepted" }


→ works ✅

Login as User → Try to Accept Session
403 Requires mentor role ❌





